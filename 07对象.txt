1. this绑定对象不同的原理：
   其实前面说的，不同的方式去判断不同的this绑定的对象，其实都是因为对象本身的位置；因为对象是引用类型，所以导致了很多这类问题。
2. 对象定义的方式
  第一：声明形式
  var newObj = {
    key: value
	// ...
  }
  第二： 构造形式
  var newObj = new Object()
  newObj.key = value
  上面声明方式的唯一区别就是声明形式可以添加多个属性，而构造形式只能一个一个添加。
3. 类型：
  简单基本类型：string、number、boolean、null和undefined，这些本身并不是对象，null有时候会被当做一种对象类型，但是这其实是一个语言本身的bug，就是null执行 typeof null时会返回‘object’，实际上，null本身是基本类型。
4. ES6中的可计算属性名
  es5新增了可计算属性名，可以在文字形式中使用[]包裹一个表达式来当做属性名:
  var prefix = 'foo'
  var myObject = {
    [prefix + 'bar']: 'hello',
	[prefix + 'baz']: 'world'
  }
  myObject['foobar'] // hello
  myObject['foobaz'] // world
5. 深拷贝与浅拷贝
  其实浅拷贝有一种方式是使用JSON.stringify()以及JSON.parse()函数来实现，这个就是一种复制方式，就是相当于将函数的函数体序列化成一个字符串，然后在js引擎去执行。
  es6定义了Object.assign()方法来实现浅拷贝；改方法的第一个参数就是目标对象，之后还可以跟一个或者多个源对象。他会便利一个或者多个源对象的所有可枚举(属性描述符emumerbable)的自由键并把他们复制(使用=操作符赋值)到目标对象，最后返回目标对象，比如下面的代码：
  var newObj = Object.assign({}, myObject)
  需要注意的是：由于Object.assign()就是使用=操作符来赋值，所以源对象属性的一些特性(比如writable)不会赋值到目标对象。
6. 属性描述符
  一个对象的属性并不是只包含他的属性值，还有属性描述符：writable(可写)、enumerable(可枚举)和configurable(可配置)，如下：
  var myObject = {
    a: 2
  }
  Object.getOwnPropertyDescriptor(myObject, 'a');
  {
    value: 2,
	writable: true,
	enumerable: true,
	configurable: true
  }
  在创建普通属性时，属性描述符会使用默认值，我们也可以使用Object.definrProperty()来添加一个新属性或者修改一个已有属性（如果他是configurable，也就是可配置的）并对特性进行设置：
  var myObject = {}
  Object.defineProperty(myObject, 'a', {
    value: 2,
	writable: true,
	configurable: true,
	enumerable: true
  })
  1. writable: 决定是否可以修改属性的值（其实就是我们定义了一个空操作的setter。严格的说，如果要和writable:false一样的话，你的setter被调用的时候应该抛出一个TypeError错误。）
  2. configurable：是要属性可配置的，就可以使用defineProperty方法来修改属性描述符；这里需要注意的是把configurable修改成false是一个单项操作，无法撤销；也就是说我们一旦设置了他的configurable为false。就是永远也改不了其他属性描述符，就连他自己也无法改变（但是这个有一个例外，即便属性时configurable:false，我们还是可以吧writable的状态由true改为false，但是无法由false改为true）；除了无法修改以外，configurable:false还会禁止删除这个属性；就是使用delete操作来删除属性。注意这里再顺便说一下delete的操作符，如果对象的某个属性是某个对象或者函数的最后一个引用者，对这个属性执行delete操作之后，这个未引用的对象或者函数就可以被垃圾回收。但是，不要把delete看做一个释放内存的工具（就像c/c++中那样），他就是一个删除对象属性的操作，仅此而已。
  3. enumerable：这个描述符控制的是属性是否会出现在对象的属性枚举中，比如说for...in循环，如果将enumerable设置成false，这个属性就不会出现在枚举中，虽然可以正常访问到这个属性。用户定义的普通属性默认都是enumerable:true。
7. 对象属性的不变性
  其实这个在es6中出现了一个const去定义一个常量。但是在es6之前定义属性不变，可以用下面的方式：
  1. 对象常量：结合writable:false和configurable:false就可以创建一个真正的常量属性（不可修改，重定义或者删除）
	  var myObject = {}
	  Object.defineProperty(myObject, 'FAVORITE_NUMER', {
		value: 42,
		writable: false,
		configurable: false
	  })
  2. 禁止扩展：如果你想禁止一个对象添加新属性并且保留已有的属性，可以使用Object.preventExtensions(...)，如下代码：
      var myObject = {
	    a: 2
	  }
	  Object.preventExtensions(myObject)
	  myObject.b = 3
	  myObject.b // undefined
	 在非严格模式下，创建属性b会静默失败，在严格模式下，将会抛出TypeError错误、
  3. 密封：Object.seal(...)会创建一个‘密封’对象，这个方式实际上会在一个现有对象上调用Object.preventExtensions(...)并把所有现有属性标记为configurable:false。所以密封之后不仅不能添加新的属性，也不能重新配置或者删除任何现有属性（注意：虽然可以修改属性的值）
  4. 冻结： Object.freeze(...)会创建一个冻结对象，这个方法实际上会在一个现有对象上调用Object.seal(...)并把所有“数据访问”属性标记为writable:false，这样就无法修改他们的值。
  我们如果冻结一个对象，但是他的属性是一个引用了另一个对象或者函数，这个对象或者函数是不会受到影响的。我们可以写一个深度冻结方法：首先在这个对象上调用Object.freeze(...)，然后遍历他引用的所有对象并在这些对象上调用Object.freeze(...)，但是一定要小心，因为这样做有可能会在无意中冻结其他共享的对象。
8. [[Get]]
  这个就是代表属性访问，如果在访问属性的时候，没有找到名称相同的属性，他就会按照原型链去寻找这个属性，如果还没找到，会返回值undefined。
  var myObject = {
    a: 2
  }
  myObject.b // undefined
  需要注意的是这种方法和访问变量时是不一样的，如果你引用了一个当前语法作用域中不存在的变量，并不会像对象属性一样返回undefined，而是会抛出一个ReferenceError异常：
  var myObject = {
    a: undefined
  }
  myObject.a // undefined
  myObject.b //undefined
  所以仅仅通过返回值，你无法判断一个属性是存在并且持有undefined值，还是变量不存在、
9. [[Put]]
  put你会猜测可能是进行赋值，但是他还是包括很多，[[Put]]别触发时，实际的行为取决于许多因素，包括对象中是否已经存在这个属性（这个是最终要的因素），如果已经存在这个属性，[[Put]]算法大致会检查下面这些内容：
  1. 属性是否是访问描述符，如果是并且存在setter就调用setter。
  2. 属性的数据描述符中writable是否为false，如果是，在非严格模式下静默失败，在严格模式下抛出异常、
  3. 如果都不是，将该值设置为属性的值。
10. 属性中的Getter以及Setter
  在es5中可以使用getter和setter部分改写默认操作，但是只能应用在单个属性上，无法应用在整个对象上。getter是一个隐藏函数，会在获取属性值时调用。setter也是一个隐藏函数，会在设置属性值时调用。
  当你给一个属性定义setter、getter或者两者都有时，这个属性会被定义为‘访问描述符’（和数据描述符相对）。对于访问描述符来说，JavaScript会忽略他们的value和writable特性，取而代之的是关心set跟get（还有configurable和enumerable）特性。如下面代码：
  var myObject = {
    // 给a定义一个getter
	get a() {
	  return 2
	}
  }
  Object.defineProperty(myObject, 'b', {
    // 给b定义一个getter
	get: function () { return this.a * 3 }
	// 确保b会出现在对象的属性列表中
	enumerable: true
  })
  如果我们给属性只定义了一个get函数，并返回特定的值，即使我们对这个属性进行赋值，也不会去改变这个属性的值，也不会抛出异常，因为我们自定义getter只会返回特定的值。所以进行set操作是没有意思的。
11. 属性的存在性
  我们可以在不访问属性值的情况下判断对象中是是否存在这个属性：
  var myObject = {
    a: 2
  }
  ('a' in myObject) // true
  ('b' in myObject) // false
  
  myObject.hasOwnProperty('a') // true
  myObject.hasOwnProperty('b') // false
  in操作符会检查属性是否在对象及其[[Propertype]]原型链中。相比之下，hasOwnProperty方法只会检查属性是否在myObject对象中。不会检查原型链。
  所有的普通对象都可以通过对于Object.property的委托来访问hasOwnProperty，但是有的对象可能没有连接到Object.property（通过Object.create(null)创建），在这种情况下，形如myObject.hasOwnProperty(...)就会失败，直接抛出TypeError异常。
  
  这里需要注意的是，虽然in操作符可以检查容器内是否有某个值，但是如果对数组的话，就是有区别的，比如 4 in [2, 4, 6]的结果却是false，是因为[2, 4, 6]这个数组中包含的属性名是0、1、2
12. 属性的枚举
  区分属性是否可以枚举可以通过for...in方法去循环遍历出对象的属性，这里需要注意for...in枚举不仅会包含所有数值索引，还会包含所有可枚举属性，最好只在对象上应用，如果要遍历数组就是用传统的for循环来遍历。
  
  还有一种方式来区分是通过对象的propertyEnumerable方法，如下代码：
  var myObject = {}
  Object.defineProperty(myObject, 'a', {
    enumerable: true,
	value: 2
  })
  Object.defineProperty(myObject, 'b', {
    enumerable: false,
	value: 3
  })
  myObject.peopertyIsEnumerable('a') // true
  myObject.peopertyIsEnumerable('b') // false
  Object.keys(myObject) // ['a']
  Object.getOwnpropertyNames(myObject) // ['a', 'b']
  propertyIsEnumerable(...)会检查给定的属性名是否直接存在与对象中（而不是在原型链上）并满足enumerable:true;Object.keys会返回所有可以枚举的属性，Object.getOwnPropertyNames都会查找对象直接包含的属性。
13 遍历
  for...in循环可以用来遍历对象的可枚举属性列表，包括原型链上的所有属性；es5中增加了一些数组的赋值迭代器，包括forEach(...)、every(...)、和some(...),每种辅助迭代器都可以接受一个回调函数并把它应用到数组的每个元素上，唯一的区别就是他们对于回调函数返回值的处理方式不同。
  forEach会遍历数组中的所有值，并忽略回调函数的返回值。every(...)会一直运行直到回调函数返回false，some(...)会一直运行直到回调函数返回true。every和some中特殊的返回值和普通for循环中的break语句类似，他们会提前终止遍历，使用for...in遍历对象是无法直接获取属性值的，因为他实际上遍历的是对象中所有可枚举属性，你需要手动获取属性值。
  
  es6新增的for...of循环语法，会直接遍历值而不是遍历数组下标。for...of循环首先会向被访问对象请求一个迭代器对象，然后通过调用迭代器对象的next方法来遍历所有的值。
  数组有内置的迭代器@@iterator，因此for...of可以直接应用到数组上，我们使用内置的@@iterator来手动遍历数组，如下代码：
  var myArray = [1, 2, 3]
  var it = myArray[Symbol.iterator]()
  
  it.next() // {value: 1, done: false}
  it.next() // {value: 2, done: false}
  it.next() // {value: 3, done: false}
  it.next() // {done: true}
  上面我们是通过es6中的符号Symbol.iterator来获取对象的@@iterator内部属性。引用类似iterator的特殊属性时要使用符号名，而不是符号包含的值。此外虽然看起来很像一个对象，但是@@iterator本事并不是一个迭代器对象，而是一个返回迭代器对象的函数。上面调用了next方法后返回的value就是当前遍历的值，done表示是否还有可以遍历的值。
  
  和数组不同，普通的对象并没有内置的@@iterator遍历器对象，所以无法自动完成for...of遍历，我们可以给需要遍历的对象实现一个@@iterator,如下代码：
  var myObject = {
    a: 2,
	b: 3
  }
  Object.defineProperty(myObject, Symbol.iterator, {
    enumerable: false,
	writable: false,
	configurable: true,
	value: function() {
	  var o = this
	  var idx = 0
	  var ks = Object.keys(o)
	  return {
	    next: function() {
		  value: o[ks[idx++]],
		  done: (idx > ks.length)
		}
	  }
	}
  })
  
  // 手动遍历myObject
  var it = myObject[Symbol.iterator]()
  it.next() // { value: 2, done: false }
  it.next() // { value: 3, done: false }
  it.next() // { done: true }
  
  // 使用for...of遍历myObject
  for (var v of myObject) {
    console.log(v)
  }
  // 2
  // 3