1. 类的设计模式
  就是实例化、继承和多态。类是一种可选的设计模式，只是你自己决定是不是用它而已，es6虽然新增了class的语法糖，但是他的类跟其他语言的类还是不一样。
2. 混入
  在继承或者实例化，JavaScript的对象机制并不会自动执行复制行为。简单俩说JavaScript中只有对象，并不存在可以被实例化的类，一个对象并不会被复制到其他对象，他们会被关联起来。由于在其他语言中类表现出来的都是复制行为，因此JavaScript开发者也想出来一个方法来模拟类的复制行为，这个就是混入。混入分为显示与隐式。
  
  2.1 显示混入
    这个功能在许多库跟框架中被称为extend(...),下面的代码我们称为mixin(...):
	// 非常简单的mixin(...)例子
	function mixin(sourceObj, targetObj) {
	  for (var key in sourceObj) {
	    // 只会在不存在的情况下进行复制
		if(!(key in targetObj)) {
		  targetObj[key] = sourceObj[key]
		}
	  }
	  return targetObj
	}
	
	var Vehicle = {
	  engines: 1,
	  ignition: function() {
	    console.log('Turning on my engine')
	  },
	  drive: function() {
	    this.ignition()
		console.log('Steering and moving forward')
	  }
	}
	
	var Car = mixin(Vehicle, {
	  wheels: 4,
	  drive: function() {
	    Vehicle.drive.call(this)
		console.log('Rolling on all' + this.wheels + 'wheels!')
	  }
	})
	显示混入会带来函数对象的引用问题，也就是说同样进行了复制，函数对象就是公用的。
	
	显示混入模式的一种变体称为“寄生继承”，它既是显示的又是隐式的，如下代码：
	// 传统的JavaScript类 Vehicle
	function Vehicle() {
	  this.engines = 1
	}
	Vehicle.prototype.ignition = function() {
	  console.log('Turning on my engine')
	}
	Vehicle.prototype.drive = function() {
	  this.ignition()
	  console.log('Steering an moving forward')
	}
	// 寄生类 Car
	function Car() {
	  // 首先Car是一个Vehicle
	  var car = new Vehicle()
	  
	  // 接着我们对car进行定制
	  car.wheels = 4
	  // 保存到Vehicle:drive()的特殊引用
	  var vehDrive = car.drive()
	  //重写Vehicle:drive()
	  car.drive = function() {
	    vehDrive.call(this)
		console.log('Rolling on all ' + this.wheels + 'wheels!')
	  }
	  return car
	}
	var myCar = new Car()
	myCar.drive() // Turning on my engine  Steering an moving forward  Rolling on all 4 wheels!
	
  2.2 隐式混入
    隐式混入跟之前的显示伪多态很像，所以也是具备同样的问题。如下代码：
	var Something = {
	  cool: function() {
	    this.greeting = 'hello world'
		this.count = this.count ? this.count + 1 : 1
	  }
	}
	Something.cool()
	Something.greeting // hello world
	Something.count // 1
	var Another = {
	  cool: function() {
	    Something.cool.call(this)
	  }
	}
	
	Another.cool()
	Another.greeting // hello world
	Another.count // 1  count不是共享的
