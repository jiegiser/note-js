1. 对象属性以及原型链上属性的遍历
  首先for...in循环会遍历出改对象的以及原型链上可枚举的所有属性；使用in操作符来检查属性在对象中是否存在时，同样会查找对象的整条原型链(无论属性是否可枚举)。
2. 属性设置与屏蔽
  如果一个对象的一个属性在他的原型链中出现过他本身也包含该属性，那么它本身的属性就会屏蔽原型链上的属性，获取属性时会选择最底层的属性。
  
  如果一个对象(myObject)的属性不在它本身，而在他的原型链中；这时候我们去修改这个属性（foo），会发现下面的情况：
  2.1 如果[[Prototype]]链上层存在名为foo，但是他被标记为只读(writable:false)，那么无法修改已有属性或者在myObject上创建屏蔽属性。如果运行在严格模式下，代码会抛出一个错误。否则，这条赋值语句会被忽略。总之不会发生屏蔽。这里需要注意的是这个限制只存在于=赋值中，使用Object.defineProperty(...)并不会受到影响。
  2.2 如果[[Prototype]]链上层存在名为foo的普通数据访问属性并且没有被标记为只读(writable:true),那就会直接在myObject中添加一个名为foo的新属性，他是屏蔽属性。
  2.3 如果[[Prototype]]链上层存在名为foo并且他是一个setter，那就一定会调用这个setter。foo不会被添加到(或者说屏蔽于)myObject，也不会重新定义foo这个setter。
  
  可以通过Object.getPrototypeOf(...)来获取对象的原型对象。
3. JavaScript的继承
  其实我们在听到继承后，就会认为JavaScript中的继承跟其他强类型的语言一样，也是复制基类的属性等等，但是在JavaScript中原型链继承其实并不是想象中的那样，他只是创建了一个对象与对象之间的连接。并没有复制对象的属性。继承意味着复制操作，JavaScript(默认)并不会复制对象属性，相反，JavaScript会在两个对象之间创建一个关联，这样一个对象就可以委托访问另一个对象的属性和函数。委托这个术语可以更加准确的描述JavaScript中对象的关联机制。