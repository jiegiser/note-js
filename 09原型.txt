1. 对象属性以及原型链上属性的遍历
  首先for...in循环会遍历出改对象的以及原型链上可枚举的所有属性；使用in操作符来检查属性在对象中是否存在时，同样会查找对象的整条原型链(无论属性是否可枚举)。
2. 属性设置与屏蔽
  如果一个对象的一个属性在他的原型链中出现过他本身也包含该属性，那么它本身的属性就会屏蔽原型链上的属性，获取属性时会选择最底层的属性。
  
  如果一个对象(myObject)的属性不在它本身，而在他的原型链中；这时候我们去修改这个属性（foo），会发现下面的情况：
  2.1 如果[[Prototype]]链上层存在名为foo，但是他被标记为只读(writable:false)，那么无法修改已有属性或者在myObject上创建屏蔽属性。如果运行在严格模式下，代码会抛出一个错误。否则，这条赋值语句会被忽略。总之不会发生屏蔽。这里需要注意的是这个限制只存在于=赋值中，使用Object.defineProperty(...)并不会受到影响。
  2.2 如果[[Prototype]]链上层存在名为foo的普通数据访问属性并且没有被标记为只读(writable:true),那就会直接在myObject中添加一个名为foo的新属性，他是屏蔽属性。
  2.3 如果[[Prototype]]链上层存在名为foo并且他是一个setter，那就一定会调用这个setter。foo不会被添加到(或者说屏蔽于)myObject，也不会重新定义foo这个setter。
  
  可以通过Object.getPrototypeOf(...)来获取对象的原型对象。
3. JavaScript的继承
  其实我们在听到继承后，就会认为JavaScript中的继承跟其他强类型的语言一样，也是复制基类的属性等等，但是在JavaScript中原型链继承其实并不是想象中的那样，他只是创建了一个对象与对象之间的连接。并没有复制对象的属性。继承意味着复制操作，JavaScript(默认)并不会复制对象属性，相反，JavaScript会在两个对象之间创建一个关联，这样一个对象就可以委托访问另一个对象的属性和函数。委托这个术语可以更加准确的描述JavaScript中对象的关联机制。

4. 构造函数
  其实JavaScript中并没有类，而且就算我们努力让JavaScript变为其他语言一样称为类继承。但是JavaScript引擎做的并不是跟其他语言一样的操作。
  在使用new调用函数的时候，他会构造一个对象并赋值给变量，这个看起来就是new的一个副作用就是无论如何都会构造一个对象。在JavaScript中，对于函数的解释就是所有带new的函数调用，函数不是构造函数，但是当且仅当使用new时，函数调用会变成构造函数调用。
  
  构造函数的原型对象上的constructor属性知识函数在声明的时候默认属性，如果你创建了一个新对象并替换了函数默认的prototype对象的引用， 那么新对象并不会自动获取constructor属性。例如下面代码：
  function Foo(){ /*...*/ }
  Foo.prototype = { /*...*/ } // 创建一个新原型对象
  var a1 = new Foo()
  a1.constructor === Foo // false
  a1.constructor === Object // true
  我们会发现是使用Foo函数进行构造的，但是a1的constructor并没有指向Foo。是因为a1在访问constructor时候在原型链上去寻找，在Foo.prototype上并没有找到这个属性，然后继续进行寻找，知道找到顶端Object.prototype；获取到这个对象的constructor属性，指向内置的Object函数。我们也可以自己去手动去指定Foo.prototype的constructor属性；注意这个属性是不可枚举的，如下代码
  
  function Foo() { /*...*/ }
  Foo.prototype = { /*...*/ } // 创建一个新原型对象
  // 需要在Foo.prototype上修复丢失的constructor属性
  // 新对象属性起到Foo.prototype的作用
  Object.defineProperty(Foo.prototype, 'constructor', {
    enumerbale: false,
	writable: true,
	configurable: true,
	value: Foo // 让constructor属性指向Foo
  })

5. 改变函数的原型

  我们经常会修改一个函数的原型，去指向另一个对象：
  function Foo(name) {
    this.name = name
  }
  Foo.prototype.myName = function() {
    return this.name
  }
  function Bar(name, label) {
    Foo.call(this, name)
	this.label = label
  }
  // 我们创建一个新的Bar.prototype对象并关联到Foo.prototype
  Bar.prototype = Object.create(Foo.prototype)
  // 注意，现在是没有bar.prototype.constructor了，可以手动进行修复
  Bar.prototype.myLabel = function() {
    return this.label
  }
  var a = new Bar('a', 'obj a')
  a.myName // 'a'
  a.myLabel // 'obj a'
  上面代码最核心的就是Bar.prototype = Object.create(Foo.prototype)；调用Objec.create会凭空创建一个新对象。并把新对象内部的[[prototype]]关联到你指定的对象在上面的例子中就是Foo.prototype;这句代码也就是创建一个新的Bar.prototype对象并把它关联到Foo.prototype;
  
  
  我们推荐使用上面的Object.create方法，而下面这两种方法指定Bar.prototype会存在一些问题：
  Bar.prototype = Foo.prototype
  它并不会创建一个关联到Bar.prototype的新对象，他只是让Bar.prototype直接引用Foo.prototype对象。因此当你执行类似Bar.prototype.myLabel进行赋值语句时，会直接修改Foo.prototype对象本身。
  
  下面代码基本能满足你的需要，但是可能会产生一些副作用
  Bar.prototype = new Foo()
  上面的代码的确会创建一个关联到Bar.prototype的新对象，但是他使用了Foo的构造函数调用。如果函数Foo有一些副作用（比如写日志，修改状态，注册到其他对象、给this添加数据属性，等等）的话，就会影响到Bar()的后代。

6. es6的Object.setPrototypeOf改变原型
  在es6之前如果修改函数的原型，我们需要设置.__proto__属性来实现；这个方法并不是标准并且无法兼容所有浏览器。es6新增了Object.setPrototypeOf方法来修改原型关联；对象下面两种方法：
  // es6之前需要抛弃默认的Bar.prototype
  Bar.prototype = Object.create(Foo.prototype)
  
  // es6开始可以直接修改现有的Bar.prototype
  Object.setPrototypeOf(Bar.prototype, Foo.prototype)
  如果忽略掉Object.create方法带来的轻微性能损失（抛弃的对象需要进行垃圾回收）
，他实际上比es6及其之后的方法更短而且可读性更好。不过无论如何，这是两种完全不同的语法。
7. 原型对象的获取
  我们可以使用Object.getPrototypeOf方法直接获取一个对象的原型链。也可以通过一种浏览器支持的非标准的方法来获取[[proto ]]属性：Object.__proto__，其实__proto__也不存在与你正在使用的对象中，他和其他的常用函数（toString、isPrororypeOf等等）一样，存在于内置的Object.property中，并且是不可枚举的。其实__proto__更像是一个getter，实现的大致代码如下：
  Object.defineProperty(Object.prototype, '__proto__', function() {
    get: function() {
	  return Object.getPrototypeOf(this)
	},
	set: function(o) {
	  // es6中的setPrototypeOf
	  Object.setPrototypeOf(this, o)
	  return o
	}
  })
8. 创建关联
  var bar = Object.create(foo)
  Object.create会创建一个新对象bar,并把它关联到我们指定的函数（foo），使用new的构造函数调用会生成.prototype以及.constructor引用。
  使用Object.create(null)会创建一盒拥有空[[prototype]]链接的对象，这个对象无法进行委托，也就是说无法实现继承，。由于这个对象没有原型链，所以instanceof操作符无法进行判断，因此总是返回false。这些特殊的空[[prototype]]对象通常被称作字典，他们完全不会受到原型链的干扰，因此非常适合用来存储数据。
  Object.create()的polyfill代码：
  if(!Object.create) {
    Object.create = function(o) {
	  function F() {}
	  F.prototype = o
	  return new F()
	}
  }
  